# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W4ejigQteOBnw3pwwsFoS6RWXoJkjx0X
"""

import networkx as nx
import matplotlib.pyplot as plt

def create_graph(input_array):
    G = nx.DiGraph()

    # Parse input array and add nodes to the graph
    for pair in input_array:
        vertex, x = pair
        G.add_node(vertex)

    # Add edges to the graph
    n = len(input_array)
    for i, pair in enumerate(input_array):
        vertex, x = pair
        # Calculate the positions of connected vertices using modulo operator
        left_vertex = input_array[(i - x) % n][0]
        right_vertex = input_array[(i + x) % n][0]
        # Add edges
        G.add_edge(vertex, left_vertex)
        G.add_edge(vertex, right_vertex)

    # Adjust edges for vertices S, A, F, and I to point to vertex E
    for vertex in ['S', 'A', 'F', 'I']:
        G.add_edge(vertex, 'E')

    return G

def draw_graph(G):
    pos = nx.spring_layout(G)  # Layout for the nodes
    nx.draw(G, pos, with_labels=True, node_size=1500, node_color="skyblue", font_size=10, font_weight="bold", arrowsize=20)
    plt.title("Directed Graph")
    plt.show()

# Sample Input
input_array = [('I', 2), ('A', 5), ('E', 4), ('F', 1), ('T', 2), ('S', 3)]

# Create and draw the graph
graph = create_graph(input_array)
draw_graph(graph)
















12